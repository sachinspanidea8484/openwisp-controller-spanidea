# NOTE: This Docker image is for production purposes only.

services:
  controller:
    image: openwisp/controller-production:latest
    environment:
      - REDIS_URL=redis://redis:6379
    build:
      context: .
    ports:
      - 8000:8000
    depends_on:
      - redis
      - postgres
      - influxdb
    # Override the command to only run Django server
    command: |
      sh -c "
      python manage.py migrate --no-input &&
      python manage.py shell <<EOF
      from django.contrib.auth import get_user_model
      User = get_user_model()
      if not User.objects.filter(username='admin').exists():
          User.objects.create_superuser('admin', 'admin@example.com', 'admin')
      else:
          print('User \"admin\" exists already, not created')
      EOF
      python manage.py runserver 0.0.0.0:8000
      "
          # No ports needed for worker


  celery-worker:
    image: openwisp/controller-production:latest
    environment:
      - REDIS_URL=redis://redis:6379
    build:
      context: .
    depends_on:
      - redis
      - postgres
      - influxdb
      - controller  # Wait for migrations to complete
    command: celery -A openwisp2 worker -l info

    # No ports needed for worker
    volumes:
      - ./:/opt/openwisp  # Share the same code volume if needed
      - logs:/opt/openwisp/tests/openwisp2
      

  celery-beat:
    image: openwisp/controller-production:latest
    environment:
      - REDIS_URL=redis://redis:6379
    build:
      context: .
    depends_on:
      - redis
      - postgres
      - influxdb
      - controller  # Wait for migrations to complete
    command: celery -A openwisp2 beat -l info --schedule /opt/openwisp/tests/openwisp2/celerybeat-schedule
    # No ports needed for beat
    volumes:
      - ./:/opt/openwisp  # Share the same code volume if needed
      - logs:/opt/openwisp/tests/openwisp2

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    entrypoint: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgis/postgis:17-3.5-alpine
    environment:
      POSTGRES_PASSWORD: openwisp2
      POSTGRES_USER: openwisp2
      POSTGRES_DB: openwisp2
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # monitoring
  influxdb:
    image: influxdb:1.8-alpine
    volumes:
      - influxdb-data:/var/lib/influxdb
      - ./tests/influxdb.conf:/etc/influxdb/influxdb.conf
    ports:
      - "8086:8086"
      - "8089:8089/udp"
      - "8090:8090/udp"
      - "8091:8091/udp"
      - "8092:8092/udp"
    environment:
      INFLUXDB_DB: openwisp2
      INFLUXDB_USER: openwisp
      INFLUXDB_USER_PASSWORD: openwisp

volumes:
  redis_data:
  postgres_data:
  influxdb-data: {}